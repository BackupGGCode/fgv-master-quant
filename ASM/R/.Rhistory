coef<-tendencia$coefficients[2]; #inclinacao
names(coef) = paste0("b",bull,"t",trial);
#plot(FGV.prices[,1], type="l",xlab="tempo", ylab="preços",main="Preço com populaçao 0% bull e 100% bear");
#abline(tendencia, lwd=2, col="blue", lty=3);
lcoef <- c(lcoef, coef);
trial<-trial+1;
}
bull<-bull+2;
}
fix(lcoef)
library(fBasics);
library(quantmod);
trial<-1; bull<-0;
lpop <-c();
while (bull <= 20){
lcoef <-c();
while (trial <= 5){
#bull<-20; trial <-1;
filename<-paste0("./data/pop/test_randType_b",bull,"_t",trial,"_prices",".csv");
FGV.PRICES.ROWDATA <- read.csv(filename);
#############################################################
FGV.prices <- FGV.PRICES.ROWDATA[, "price", drop = FALSE];
rownames(FGV.prices) = FGV.PRICES.ROWDATA$time;
#############################################################
rows<-1:nrow(FGV.prices);
tendencia <- lm( FGV.prices[,1] ~ rows);
coef<-tendencia$coefficients[2]; #inclinacao
names(coef) = paste0("b",bull,"t",trial);
#plot(FGV.prices[,1], type="l",xlab="tempo", ylab="preços",main="Preço com populaçao 0% bull e 100% bear");
#abline(tendencia, lwd=2, col="blue", lty=3);
lcoef <- c(lcoef, coef);
trial<-trial+1;
}
bull<-bull+2;
trial<-0;
lpop <- c(lpop, lcoef);
}
library(fBasics);
library(quantmod);
trial<-1; bull<-0;
lpop <-c();
while (bull <= 20){
lcoef <-c();
while (trial <= 5){
#bull<-20; trial <-1;
filename<-paste0("./data/pop/test_randType_b",bull,"_t",trial,"_prices",".csv");
FGV.PRICES.ROWDATA <- read.csv(filename);
#############################################################
FGV.prices <- FGV.PRICES.ROWDATA[, "price", drop = FALSE];
rownames(FGV.prices) = FGV.PRICES.ROWDATA$time;
#############################################################
rows<-1:nrow(FGV.prices);
tendencia <- lm( FGV.prices[,1] ~ rows);
coef<-tendencia$coefficients[2]; #inclinacao
names(coef) = paste0("b",bull,"t",trial);
#plot(FGV.prices[,1], type="l",xlab="tempo", ylab="preços",main="Preço com populaçao 0% bull e 100% bear");
#abline(tendencia, lwd=2, col="blue", lty=3);
lcoef <- c(lcoef, coef);
trial<-trial+1;
}
bull<-bull+2;
trial<-1;
lpop <- c(lpop, lcoef);
}
fix(lpop)
POPULATION <- as.xts(lpop)
fix(lpop)
is.numeric(lpop)
lpop
mydata <- data.frame(lpop)
mydata
View(mydata)
mydata
load("/storage/data/projetos/artificial-market/quickfix-1.13.3/ASM/R/.RData")
load("/storage/data/projetos/artificial-market/quickfix-1.13.3/ASM/R/.RData")
library(quantmod)
getSymbols('ITUB4.SA', from="2013-02-01", to="2013-03-30"", src='yahoo')
ddd
d)
}
;
:::
library(quantmod)
getSymbols('ITUB4.SA', from="2013-02-01", to="2013-03-30", src='yahoo')
library(quantmod)
getSymbols('ITUB4.SA', from="2013-02-01", to="2013-03-30", src='yahoo')
library(quantmod)
getSymbols('ITUB4.SA', from="2013-02-01", to="2013-03-30", src='yahoo')
barChart(ITUB4.SA)
addBBands()
barChart(ITUB4.SA,,theme='white')
addBBands()
library(quantmod)
getSymbols('ITUB4.SA', from="2013-01-01", to="2013-03-30", src='yahoo')
barChart(ITUB4.SA,,theme='white')
addBBands()
library(quantmod)
png(filename = "./figure/bb.png", width = 700, height = 600, units = "px");
getSymbols('ITUB4.SA', from="2013-01-01", to="2013-03-30", src='yahoo');
barChart(ITUB4.SA,,theme='white');
addBBands();
dev.off();
library("chron");
library("RMySQL");
# parametros a taxa com reversao a media
TEMPO_INICIO<-chron(times="00:00:00");
TEMPO_FIM<-chron(times="00:35:00");
DELTA_TEMPO <- seq(TEMPO_INICIO , TEMPO_FIM , by = times("00:00:01"));
TEMPO_TOTAL <- length(DELTA_TEMPO);
NUM_PONTOS <-length(DELTA_TEMPO);
MEDIA_GLOBAL=100.0;
LAMBDA=0.005;# teste 1
#LAMBDA=0.005;# teste 2
SIGMA=0.0005;# teste 1
#SIGMA=1;# teste 2
MEDIA_INICIAL=100.0;
# connecting to DB ...
con <- dbConnect(MySQL(),user="quickfix", password="quickfix",dbname="quickfix", host="localhost");
on.exit(dbDisconnect(con));
#The code of Euler Maruyama simulation method
ornstein_uhlenbeck <- function(T,n,nu,lambda,sigma,x0){
dw  <- rnorm(n, 0, sqrt(T/n))
dt  <- T/n
x <- c(x0)
for (i in 2:(n+1)) {
x[i]  <-  x[i-1] + lambda*(nu-x[i-1])*dt + sigma*dw[i-1];
#if(x[i] < 0)x[i] <-0;
}
return(x);
}
reta <- function(n,const,coef){
y <- c(const);
for (i in 2:(n+1)) {
y[i]  <-  y[i-1] + coef;
if(y[i] < 0)y[i] <-0;
}
return(y);
}
#x<- ornstein_uhlenbeck(TEMPO_TOTAL,NUM_PONTOS,MEDIA_GLOBAL,LAMBDA,SIGMA,MEDIA_INICIAL);
#plot(x,type="l", xlab="tempo", ylab="preço",col="red");
x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.045);
plot(x,type="l", xlab="tempo", ylab="preço");
x
x<- reta(NUM_PONTOS,MEDIA_INICIAL,-0.045);
plot(x,type="l", xlab="tempo", ylab="preço");
x
x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.045);
plot(x,type="l", xlab="tempo", ylab="preço");
res<-dbSendQuery(con, "DELETE FROM exogenous WHERE time >= '00:00:00'");
for(i in 1:length(x)){
sql <- sprintf("INSERT INTO exogenous (time, value) VALUES ('%s', %f)",DELTA_TEMPO[i], x[i]);
rs <- dbSendQuery(con, sql);
}
dbClearResult(rs);
dbDisconnect(con);
library("chron");
library("RMySQL");
# parametros a taxa com reversao a media
TEMPO_INICIO<-chron(times="00:00:00");
TEMPO_FIM<-chron(times="00:10:00");
DELTA_TEMPO <- seq(TEMPO_INICIO , TEMPO_FIM , by = times("00:00:01"));
TEMPO_TOTAL <- length(DELTA_TEMPO);
NUM_PONTOS <-length(DELTA_TEMPO);
MEDIA_GLOBAL=100.0;
LAMBDA=0.005;# teste 1
#LAMBDA=0.005;# teste 2
SIGMA=0.0005;# teste 1
#SIGMA=1;# teste 2
MEDIA_INICIAL=100.0;
# connecting to DB ...
con <- dbConnect(MySQL(),user="quickfix", password="quickfix",dbname="quickfix", host="localhost");
on.exit(dbDisconnect(con));
#The code of Euler Maruyama simulation method
ornstein_uhlenbeck <- function(T,n,nu,lambda,sigma,x0){
dw  <- rnorm(n, 0, sqrt(T/n))
dt  <- T/n
x <- c(x0)
for (i in 2:(n+1)) {
x[i]  <-  x[i-1] + lambda*(nu-x[i-1])*dt + sigma*dw[i-1];
#if(x[i] < 0)x[i] <-0;
}
return(x);
}
reta <- function(n,const,coef){
y <- c(const);
for (i in 2:(n+1)) {
y[i]  <-  y[i-1] + coef;
if(y[i] < 0)y[i] <-0;
}
return(y);
}
y <- c(const);
library("chron");
library("RMySQL");
# parametros a taxa com reversao a media
TEMPO_INICIO<-chron(times="00:00:00");
TEMPO_FIM<-chron(times="00:10:00");
DELTA_TEMPO <- seq(TEMPO_INICIO , TEMPO_FIM , by = times("00:00:01"));
TEMPO_TOTAL <- length(DELTA_TEMPO);
NUM_PONTOS <-length(DELTA_TEMPO);
MEDIA_GLOBAL=100.0;
LAMBDA=0.005;# teste 1
#LAMBDA=0.005;# teste 2
SIGMA=0.0005;# teste 1
#SIGMA=1;# teste 2
MEDIA_INICIAL=100.0;
# connecting to DB ...
con <- dbConnect(MySQL(),user="quickfix", password="quickfix",dbname="quickfix", host="localhost");
on.exit(dbDisconnect(con));
#The code of Euler Maruyama simulation method
ornstein_uhlenbeck <- function(T,n,nu,lambda,sigma,x0){
dw  <- rnorm(n, 0, sqrt(T/n))
dt  <- T/n
x <- c(x0)
for (i in 2:(n+1)) {
x[i]  <-  x[i-1] + lambda*(nu-x[i-1])*dt + sigma*dw[i-1];
#if(x[i] < 0)x[i] <-0;
}
return(x);
}
reta <- function(n,const,coef){
y <- c(const);
for (i in 2:(n+1)) {
y[i]  <-  y[i-1] + coef;
if(y[i] < 0)y[i] <-0;
}
return(y);
}
x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.045);
plot(x,type="l", xlab="tempo", ylab="preço");
x
x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.45);
plot(x,type="l", xlab="tempo", ylab="preço");
x
x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.5);
plot(x,type="l", xlab="tempo", ylab="preço");
x
library("chron");
library("RMySQL");
# parametros a taxa com reversao a media
TEMPO_INICIO<-chron(times="00:00:00");
TEMPO_FIM<-chron(times="00:10:00");
DELTA_TEMPO <- seq(TEMPO_INICIO , TEMPO_FIM , by = times("00:00:01"));
TEMPO_TOTAL <- length(DELTA_TEMPO);
NUM_PONTOS <-length(DELTA_TEMPO);
MEDIA_GLOBAL=100.0;
LAMBDA=0.005;# teste 1
#LAMBDA=0.005;# teste 2
SIGMA=0.0005;# teste 1
#SIGMA=1;# teste 2
MEDIA_INICIAL=100.0;
# connecting to DB ...
con <- dbConnect(MySQL(),user="quickfix", password="quickfix",dbname="quickfix", host="localhost");
on.exit(dbDisconnect(con));
#The code of Euler Maruyama simulation method
ornstein_uhlenbeck <- function(T,n,nu,lambda,sigma,x0){
dw  <- rnorm(n, 0, sqrt(T/n))
dt  <- T/n
x <- c(x0)
for (i in 2:(n+1)) {
x[i]  <-  x[i-1] + lambda*(nu-x[i-1])*dt + sigma*dw[i-1];
#if(x[i] < 0)x[i] <-0;
}
return(x);
}
reta <- function(n,const,coef){
y <- c(const);
for (i in 2:(n+1)) {
y[i]  <-  y[i-1] + coef;
if(y[i] < 0)y[i] <-0;
}
return(y);
}
#x<- ornstein_uhlenbeck(TEMPO_TOTAL,NUM_PONTOS,MEDIA_GLOBAL,LAMBDA,SIGMA,MEDIA_INICIAL);
#plot(x,type="l", xlab="tempo", ylab="preço",col="red");
x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.5);
plot(x,type="l", xlab="tempo", ylab="preço");
res<-dbSendQuery(con, "DELETE FROM exogenous WHERE time >= '00:00:00'");
for(i in 1:length(x)){
sql <- sprintf("INSERT INTO exogenous (time, value) VALUES ('%s', %f)",DELTA_TEMPO[i], x[i]);
rs <- dbSendQuery(con, sql);
}
dbClearResult(rs);
dbDisconnect(con);
library("chron");
library("RMySQL");
# parametros a taxa com reversao a media
TEMPO_INICIO<-chron(times="00:00:00");
TEMPO_FIM<-chron(times="00:10:00");
DELTA_TEMPO <- seq(TEMPO_INICIO , TEMPO_FIM , by = times("00:00:01"));
TEMPO_TOTAL <- length(DELTA_TEMPO);
NUM_PONTOS <-length(DELTA_TEMPO);
MEDIA_GLOBAL=100.0;
LAMBDA=0.005;# teste 1
#LAMBDA=0.005;# teste 2
SIGMA=0.0005;# teste 1
#SIGMA=1;# teste 2
MEDIA_INICIAL=100.0;
# connecting to DB ...
con <- dbConnect(MySQL(),user="quickfix", password="quickfix",dbname="quickfix", host="localhost");
on.exit(dbDisconnect(con));
#The code of Euler Maruyama simulation method
ornstein_uhlenbeck <- function(T,n,nu,lambda,sigma,x0){
dw  <- rnorm(n, 0, sqrt(T/n))
dt  <- T/n
x <- c(x0)
for (i in 2:(n+1)) {
x[i]  <-  x[i-1] + lambda*(nu-x[i-1])*dt + sigma*dw[i-1];
#if(x[i] < 0)x[i] <-0;
}
return(x);
}
reta <- function(n,const,coef){
y <- c(const);
for (i in 2:(n+1)) {
y[i]  <-  y[i-1] + coef;
if(y[i] < 0)y[i] <-0;
}
return(y);
}
#x<- ornstein_uhlenbeck(TEMPO_TOTAL,NUM_PONTOS,MEDIA_GLOBAL,LAMBDA,SIGMA,MEDIA_INICIAL);
#plot(x,type="l", xlab="tempo", ylab="preço",col="red");
x<- reta(NUM_PONTOS,MEDIA_INICIAL,-0.5);
plot(x,type="l", xlab="tempo", ylab="preço");
res<-dbSendQuery(con, "DELETE FROM exogenous WHERE time >= '00:00:00'");
for(i in 1:length(x)){
sql <- sprintf("INSERT INTO exogenous (time, value) VALUES ('%s', %f)",DELTA_TEMPO[i], x[i]);
rs <- dbSendQuery(con, sql);
}
dbClearResult(rs);
dbDisconnect(con);
library("chron");
library("RMySQL");
# parametros a taxa com reversao a media
TEMPO_INICIO<-chron(times="00:00:00");
TEMPO_FIM<-chron(times="00:10:00");
DELTA_TEMPO <- seq(TEMPO_INICIO , TEMPO_FIM , by = times("00:00:01"));
TEMPO_TOTAL <- length(DELTA_TEMPO);
NUM_PONTOS <-length(DELTA_TEMPO);
MEDIA_GLOBAL=100.0;
LAMBDA=0.005;# teste 1
#LAMBDA=0.005;# teste 2
SIGMA=0.0005;# teste 1
#SIGMA=1;# teste 2
MEDIA_INICIAL=100.0;
# connecting to DB ...
con <- dbConnect(MySQL(),user="quickfix", password="quickfix",dbname="quickfix", host="localhost");
on.exit(dbDisconnect(con));
#The code of Euler Maruyama simulation method
ornstein_uhlenbeck <- function(T,n,nu,lambda,sigma,x0){
dw  <- rnorm(n, 0, sqrt(T/n))
dt  <- T/n
x <- c(x0)
for (i in 2:(n+1)) {
x[i]  <-  x[i-1] + lambda*(nu-x[i-1])*dt + sigma*dw[i-1];
#if(x[i] < 0)x[i] <-0;
}
return(x);
}
reta <- function(n,const,coef){
y <- c(const);
for (i in 2:(n+1)) {
y[i]  <-  y[i-1] + coef;
if(y[i] < 0)y[i] <-0;
}
return(y);
}
#x<- ornstein_uhlenbeck(TEMPO_TOTAL,NUM_PONTOS,MEDIA_GLOBAL,LAMBDA,SIGMA,MEDIA_INICIAL);
#plot(x,type="l", xlab="tempo", ylab="preço",col="red");
#x<- reta(NUM_PONTOS,MEDIA_INICIAL,-0.5);
x<- reta(NUM_PONTOS,MEDIA_INICIAL,0.0);
plot(x,type="l", xlab="tempo", ylab="preço");
library("chron");
library("RMySQL");
# parametros a taxa com reversao a media
TEMPO_INICIO<-chron(times="00:00:00");
TEMPO_FIM<-chron(times="00:10:00");
DELTA_TEMPO <- seq(TEMPO_INICIO , TEMPO_FIM , by = times("00:00:01"));
TEMPO_TOTAL <- length(DELTA_TEMPO);
NUM_PONTOS <-length(DELTA_TEMPO);
MEDIA_GLOBAL=100.0;
LAMBDA=0.005;# teste 1
#LAMBDA=0.005;# teste 2
SIGMA=0.0005;# teste 1
#SIGMA=1;# teste 2
MEDIA_INICIAL=100.0;
# connecting to DB ...
con <- dbConnect(MySQL(),user="quickfix", password="quickfix",dbname="quickfix", host="localhost");
on.exit(dbDisconnect(con));
#The code of Euler Maruyama simulation method
ornstein_uhlenbeck <- function(T,n,nu,lambda,sigma,x0){
dw  <- rnorm(n, 0, sqrt(T/n))
dt  <- T/n
x <- c(x0)
for (i in 2:(n+1)) {
x[i]  <-  x[i-1] + lambda*(nu-x[i-1])*dt + sigma*dw[i-1];
#if(x[i] < 0)x[i] <-0;
}
return(x);
}
reta <- function(n,const,coef){
y <- c(const);
for (i in 2:(n+1)) {
y[i]  <-  y[i-1] + coef;
if(y[i] < 0)y[i] <-0;
}
return(y);
}
#x<- ornstein_uhlenbeck(TEMPO_TOTAL,NUM_PONTOS,MEDIA_GLOBAL,LAMBDA,SIGMA,MEDIA_INICIAL);
#plot(x,type="l", xlab="tempo", ylab="preço",col="red");
#x<- reta(NUM_PONTOS,MEDIA_INICIAL,-0.5);
x<- reta(NUM_PONTOS,MEDIA_INICIAL,0.0);
plot(x,type="l", xlab="tempo", ylab="preço");
res<-dbSendQuery(con, "DELETE FROM exogenous WHERE time >= '00:00:00'");
for(i in 1:length(x)){
sql <- sprintf("INSERT INTO exogenous (time, value) VALUES ('%s', %f)",DELTA_TEMPO[i], x[i]);
rs <- dbSendQuery(con, sql);
}
dbClearResult(rs);
dbDisconnect(con);
library(fBasics);
library(quantmod);
TESTE<-"CRESCENTE";
nTESTE<-1;
lcoef <-c();
filename<-paste0("./data/MV150/test_MV_",TESTE,"",nTESTE,"_prices",".csv");
FGV.PRICES.ROWDATA <- read.csv(filename);
FGV.prices <- FGV.PRICES.ROWDATA[, "price", drop = FALSE];
rownames(FGV.prices) = FGV.PRICES.ROWDATA$time;
rows<-1:nrow(FGV.prices);
tendencia <- lm( FGV.prices[,1] ~ rows);
coef<-tendencia$coefficients[2]; #inclinacao
fix(coef)
plot(FGV.prices[,1], type="l",xlab="tempo", ylab="preços",main="Preços");
abline(tendencia, lwd=2, col="blue", lty=3);
lcoef <- c(lcoef, coef);
nTESTE<-nTESTE+1;
library(fBasics);
library(quantmod);
TESTE<-"CRESCENTE";
nTESTE<-1;
lcoef <-c();
while (nTESTE <= 50){
filename<-paste0("./data/MV150/test_MV_",TESTE,"",nTESTE,"_prices",".csv");
FGV.PRICES.ROWDATA <- read.csv(filename);
#############################################################
FGV.prices <- FGV.PRICES.ROWDATA[, "price", drop = FALSE];
rownames(FGV.prices) = FGV.PRICES.ROWDATA$time;
#############################################################
rows<-1:nrow(FGV.prices);
tendencia <- lm( FGV.prices[,1] ~ rows);
coef<-tendencia$coefficients[2]; #inclinacao
#names(coef) = paste0("b",bull,"t",trial);
#plot(FGV.prices[,1], type="l",xlab="tempo", ylab="preços",main="Preços");
#abline(tendencia, lwd=2, col="blue", lty=3);
lcoef <- c(lcoef, coef);
nTESTE<-nTESTE+1;
}
mydata <- data.frame(lcoef);
View(mydata)
mydata
mydata[,2]
mydata[,1]
mydata[]
mydata$coef
mydata
mydata$lcoef
mydata
library(fBasics);
library(quantmod);
TESTE<-"DECRESCENTE";
nTESTE<-1;
lcoef <-c();
while (nTESTE <= 50){
filename<-paste0("./data/MV150/test_MV_",TESTE,"",nTESTE,"_prices",".csv");
FGV.PRICES.ROWDATA <- read.csv(filename);
#############################################################
FGV.prices <- FGV.PRICES.ROWDATA[, "price", drop = FALSE];
rownames(FGV.prices) = FGV.PRICES.ROWDATA$time;
#############################################################
rows<-1:nrow(FGV.prices);
tendencia <- lm( FGV.prices[,1] ~ rows);
coef<-tendencia$coefficients[2]; #inclinacao
#plot(FGV.prices[,1], type="l",xlab="tempo", ylab="preços",main="Preços");
#abline(tendencia, lwd=2, col="blue", lty=3);
lcoef <- c(lcoef, coef);
nTESTE<-nTESTE+1;
}
mydata <- data.frame(lcoef);
mydata
library(fBasics);
library(quantmod);
TESTE<-"HORIZONTAL";
nTESTE<-1;
lcoef <-c();
while (nTESTE <= 50){
filename<-paste0("./data/MV150/test_MV_",TESTE,"",nTESTE,"_prices",".csv");
FGV.PRICES.ROWDATA <- read.csv(filename);
#############################################################
FGV.prices <- FGV.PRICES.ROWDATA[, "price", drop = FALSE];
rownames(FGV.prices) = FGV.PRICES.ROWDATA$time;
#############################################################
rows<-1:nrow(FGV.prices);
tendencia <- lm( FGV.prices[,1] ~ rows);
coef<-tendencia$coefficients[2]; #inclinacao
#plot(FGV.prices[,1], type="l",xlab="tempo", ylab="preços",main="Preços");
#abline(tendencia, lwd=2, col="blue", lty=3);
lcoef <- c(lcoef, coef);
nTESTE<-nTESTE+1;
}
mydata <- data.frame(lcoef);
mydata
