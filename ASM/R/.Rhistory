plot(x,type="l", xlab="tempo", ylab="preço");
res<-dbSendQuery(con, "DELETE FROM exogenous WHERE time >= '00:00:00'");
for(i in 1:length(x)){
sql <- sprintf("INSERT INTO exogenous (time, value) VALUES ('%s', %f)",DELTA_TEMPO[i], x[i]);
rs <- dbSendQuery(con, sql);
}
dbClearResult(rs);
dbDisconnect(con);
library(fBasics);
library(quantmod);
#TESTE<-c("CRESCENTE","CONSTANTE","DECRESCENTE");
TESTE<-c("CRESCENTE","DECRESCENTE");
nTIPO<-1;
EXO.TIPOS <-data.frame(teste=c(1:50));
while (nTIPO <= 2){
lcoef <-c();
nTESTE<-1;
while (nTESTE <= 50){
filename<-paste0("./data/MV3/test_MV3_",TESTE[nTIPO],"",nTESTE,"_prices",".csv");
FGV.PRICES.ROWDATA <- read.csv(filename);
#############################################################
FGV.prices <- FGV.PRICES.ROWDATA[, "price", drop = FALSE];
rownames(FGV.prices) = FGV.PRICES.ROWDATA$time;
#############################################################
rows<-1:nrow(FGV.prices);
tendencia <- lm( FGV.prices[,1] ~ rows);
coef<-tendencia$coefficients[2]; #inclinacao
#plot(FGV.prices[,1], type="l",xlab="tempo", ylab="preços",main="Preços");
#abline(tendencia, lwd=2, col="blue", lty=3);
lcoef <- c(lcoef, coef);
nTESTE<-nTESTE+1;
}
COEFICIENTES <- data.frame(lcoef);
colnames(COEFICIENTES) <- TESTE[nTIPO];
EXO.TIPOS <-data.frame(EXO.TIPOS, COEFICIENTES);
nTIPO<-nTIPO+1;
}
write.csv(EXO.TIPOS, file = "./data/MV3/test_MV3_summary.csv", sep = " ",
eol = "\n", na = "NA", dec = ",", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),fileEncoding = "")
library("chron");
library("RMySQL");
# parametros a taxa com reversao a media
TEMPO_INICIO<-chron(times="00:00:00");
TEMPO_FIM<-chron(times="00:10:00");
DELTA_TEMPO <- seq(TEMPO_INICIO , TEMPO_FIM , by = times("00:00:01"));
TEMPO_TOTAL <- length(DELTA_TEMPO);
NUM_PONTOS <-length(DELTA_TEMPO);
MEDIA_GLOBAL=100.0;
LAMBDA=0.005;# teste 1
#LAMBDA=0.005;# teste 2
SIGMA=0.0005;# teste 1
#SIGMA=1;# teste 2
MEDIA_INICIAL=100.0;
# connecting to DB ...
con <- dbConnect(MySQL(),user="quickfix", password="quickfix",dbname="quickfix", host="localhost");
on.exit(dbDisconnect(con));
#The code of Euler Maruyama simulation method
ornstein_uhlenbeck <- function(T,n,nu,lambda,sigma,x0){
dw  <- rnorm(n, 0, sqrt(T/n))
dt  <- T/n
x <- c(x0)
for (i in 2:(n+1)) {
x[i]  <-  x[i-1] + lambda*(nu-x[i-1])*dt + sigma*dw[i-1];
#if(x[i] < 0)x[i] <-0;
}
return(x);
}
reta <- function(n,const,coef){
y <- c(const);
for (i in 2:(n+1)) {
y[i]  <-  y[i-1] + coef;
if(y[i] < 0)y[i] <-0;
}
return(y);
}
#x<- ornstein_uhlenbeck(TEMPO_TOTAL,NUM_PONTOS,MEDIA_GLOBAL,LAMBDA,SIGMA,MEDIA_INICIAL);
#plot(x,type="l", xlab="tempo", ylab="preço",col="red");
x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.25);
#x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.5);
#x<- reta(NUM_PONTOS,MEDIA_INICIAL,0.0);
plot(x,type="l", xlab="tempo", ylab="preço");
res<-dbSendQuery(con, "DELETE FROM exogenous WHERE time >= '00:00:00'");
for(i in 1:length(x)){
sql <- sprintf("INSERT INTO exogenous (time, value) VALUES ('%s', %f)",DELTA_TEMPO[i], x[i]);
rs <- dbSendQuery(con, sql);
}
dbClearResult(rs);
dbDisconnect(con);
library("chron");
library("RMySQL");
# parametros a taxa com reversao a media
TEMPO_INICIO<-chron(times="00:00:00");
TEMPO_FIM<-chron(times="00:10:00");
DELTA_TEMPO <- seq(TEMPO_INICIO , TEMPO_FIM , by = times("00:00:01"));
TEMPO_TOTAL <- length(DELTA_TEMPO);
NUM_PONTOS <-length(DELTA_TEMPO);
MEDIA_GLOBAL=100.0;
LAMBDA=0.005;# teste 1
#LAMBDA=0.005;# teste 2
SIGMA=0.0005;# teste 1
#SIGMA=1;# teste 2
MEDIA_INICIAL=100.0;
# connecting to DB ...
con <- dbConnect(MySQL(),user="quickfix", password="quickfix",dbname="quickfix", host="localhost");
on.exit(dbDisconnect(con));
#The code of Euler Maruyama simulation method
ornstein_uhlenbeck <- function(T,n,nu,lambda,sigma,x0){
dw  <- rnorm(n, 0, sqrt(T/n))
dt  <- T/n
x <- c(x0)
for (i in 2:(n+1)) {
x[i]  <-  x[i-1] + lambda*(nu-x[i-1])*dt + sigma*dw[i-1];
#if(x[i] < 0)x[i] <-0;
}
return(x);
}
reta <- function(n,const,coef){
y <- c(const);
for (i in 2:(n+1)) {
y[i]  <-  y[i-1] + coef;
if(y[i] < 0)y[i] <-0;
}
return(y);
}
#x<- ornstein_uhlenbeck(TEMPO_TOTAL,NUM_PONTOS,MEDIA_GLOBAL,LAMBDA,SIGMA,MEDIA_INICIAL);
#plot(x,type="l", xlab="tempo", ylab="preço",col="red");
x<- reta(NUM_PONTOS,MEDIA_INICIAL,-0.25);
#x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.5);
#x<- reta(NUM_PONTOS,MEDIA_INICIAL,0.0);
plot(x,type="l", xlab="tempo", ylab="preço");
res<-dbSendQuery(con, "DELETE FROM exogenous WHERE time >= '00:00:00'");
for(i in 1:length(x)){
sql <- sprintf("INSERT INTO exogenous (time, value) VALUES ('%s', %f)",DELTA_TEMPO[i], x[i]);
rs <- dbSendQuery(con, sql);
}
dbClearResult(rs);
dbDisconnect(con);
library(fBasics);
library(quantmod);
#TESTE<-c("CRESCENTE","CONSTANTE","DECRESCENTE");
TESTE<-c("CRESCENTE");
nTIPO<-1;
EXO.TIPOS <-data.frame(teste=c(1:50));
while (nTIPO <= 1){
lcoef <-c();
nTESTE<-1;
while (nTESTE <= 50){
filename<-paste0("./data/MV4/test_MV4_",TESTE[nTIPO],"",nTESTE,"_prices",".csv");
FGV.PRICES.ROWDATA <- read.csv(filename);
#############################################################
FGV.prices <- FGV.PRICES.ROWDATA[, "price", drop = FALSE];
rownames(FGV.prices) = FGV.PRICES.ROWDATA$time;
#############################################################
rows<-1:nrow(FGV.prices);
tendencia <- lm( FGV.prices[,1] ~ rows);
coef<-tendencia$coefficients[2]; #inclinacao
#plot(FGV.prices[,1], type="l",xlab="tempo", ylab="preços",main="Preços");
#abline(tendencia, lwd=2, col="blue", lty=3);
lcoef <- c(lcoef, coef);
nTESTE<-nTESTE+1;
}
COEFICIENTES <- data.frame(lcoef);
colnames(COEFICIENTES) <- TESTE[nTIPO];
EXO.TIPOS <-data.frame(EXO.TIPOS, COEFICIENTES);
nTIPO<-nTIPO+1;
}
write.csv(EXO.TIPOS, file = "./data/MV4/test_MV4_summary.csv", sep = " ",
eol = "\n", na = "NA", dec = ",", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),fileEncoding = "")
library(fBasics);
library(quantmod);
#TESTE<-c("CRESCENTE","CONSTANTE","DECRESCENTE");
TESTE<-c("CRESCENTE");
nTIPO<-1;
EXO.TIPOS <-data.frame(teste=c(1:50));
while (nTIPO <= 1){
lcoef <-c();
nTESTE<-1;
while (nTESTE <= 50){
filename<-paste0("./data/MV4/test_MV3_",TESTE[nTIPO],"",nTESTE,"_prices",".csv");
FGV.PRICES.ROWDATA <- read.csv(filename);
#############################################################
FGV.prices <- FGV.PRICES.ROWDATA[, "price", drop = FALSE];
rownames(FGV.prices) = FGV.PRICES.ROWDATA$time;
#############################################################
rows<-1:nrow(FGV.prices);
tendencia <- lm( FGV.prices[,1] ~ rows);
coef<-tendencia$coefficients[2]; #inclinacao
#plot(FGV.prices[,1], type="l",xlab="tempo", ylab="preços",main="Preços");
#abline(tendencia, lwd=2, col="blue", lty=3);
lcoef <- c(lcoef, coef);
nTESTE<-nTESTE+1;
}
COEFICIENTES <- data.frame(lcoef);
colnames(COEFICIENTES) <- TESTE[nTIPO];
EXO.TIPOS <-data.frame(EXO.TIPOS, COEFICIENTES);
nTIPO<-nTIPO+1;
}
write.csv(EXO.TIPOS, file = "./data/MV4/test_MV4_summary.csv", sep = " ",
eol = "\n", na = "NA", dec = ",", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),fileEncoding = "")
library("chron");
library("RMySQL");
# parametros a taxa com reversao a media
TEMPO_INICIO<-chron(times="00:00:00");
TEMPO_FIM<-chron(times="00:10:00");
DELTA_TEMPO <- seq(TEMPO_INICIO , TEMPO_FIM , by = times("00:00:01"));
TEMPO_TOTAL <- length(DELTA_TEMPO);
NUM_PONTOS <-length(DELTA_TEMPO);
MEDIA_GLOBAL=100.0;
LAMBDA=0.005;# teste 1
#LAMBDA=0.005;# teste 2
SIGMA=0.0005;# teste 1
#SIGMA=1;# teste 2
MEDIA_INICIAL=100.0;
# connecting to DB ...
con <- dbConnect(MySQL(),user="quickfix", password="quickfix",dbname="quickfix", host="localhost");
on.exit(dbDisconnect(con));
#The code of Euler Maruyama simulation method
ornstein_uhlenbeck <- function(T,n,nu,lambda,sigma,x0){
dw  <- rnorm(n, 0, sqrt(T/n))
dt  <- T/n
x <- c(x0)
for (i in 2:(n+1)) {
x[i]  <-  x[i-1] + lambda*(nu-x[i-1])*dt + sigma*dw[i-1];
#if(x[i] < 0)x[i] <-0;
}
return(x);
}
reta <- function(n,const,coef){
y <- c(const);
for (i in 2:(n+1)) {
y[i]  <-  y[i-1] + coef;
if(y[i] < 0)y[i] <-0;
}
return(y);
}
#x<- ornstein_uhlenbeck(TEMPO_TOTAL,NUM_PONTOS,MEDIA_GLOBAL,LAMBDA,SIGMA,MEDIA_INICIAL);
#plot(x,type="l", xlab="tempo", ylab="preço",col="red");
x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.25);
#x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.5);
#x<- reta(NUM_PONTOS,MEDIA_INICIAL,0.0);
plot(x,type="l", xlab="tempo", ylab="preço");
res<-dbSendQuery(con, "DELETE FROM exogenous WHERE time >= '00:00:00'");
for(i in 1:length(x)){
sql <- sprintf("INSERT INTO exogenous (time, value) VALUES ('%s', %f)",DELTA_TEMPO[i], x[i]);
rs <- dbSendQuery(con, sql);
}
dbClearResult(rs);
dbDisconnect(con);
library("chron");
library("RMySQL");
# parametros a taxa com reversao a media
TEMPO_INICIO<-chron(times="00:00:00");
TEMPO_FIM<-chron(times="00:10:00");
DELTA_TEMPO <- seq(TEMPO_INICIO , TEMPO_FIM , by = times("00:00:01"));
TEMPO_TOTAL <- length(DELTA_TEMPO);
NUM_PONTOS <-length(DELTA_TEMPO);
MEDIA_GLOBAL=100.0;
LAMBDA=0.005;# teste 1
#LAMBDA=0.005;# teste 2
SIGMA=0.0005;# teste 1
#SIGMA=1;# teste 2
MEDIA_INICIAL=100.0;
# connecting to DB ...
con <- dbConnect(MySQL(),user="quickfix", password="quickfix",dbname="quickfix", host="localhost");
on.exit(dbDisconnect(con));
#The code of Euler Maruyama simulation method
ornstein_uhlenbeck <- function(T,n,nu,lambda,sigma,x0){
dw  <- rnorm(n, 0, sqrt(T/n))
dt  <- T/n
x <- c(x0)
for (i in 2:(n+1)) {
x[i]  <-  x[i-1] + lambda*(nu-x[i-1])*dt + sigma*dw[i-1];
#if(x[i] < 0)x[i] <-0;
}
return(x);
}
reta <- function(n,const,coef){
y <- c(const);
for (i in 2:(n+1)) {
y[i]  <-  y[i-1] + coef;
if(y[i] < 0)y[i] <-0;
}
return(y);
}
#x<- ornstein_uhlenbeck(TEMPO_TOTAL,NUM_PONTOS,MEDIA_GLOBAL,LAMBDA,SIGMA,MEDIA_INICIAL);
#plot(x,type="l", xlab="tempo", ylab="preço",col="red");
#x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.25);
x<- reta(NUM_PONTOS,MEDIA_INICIAL,0.0);
#x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.5);
#x<- reta(NUM_PONTOS,MEDIA_INICIAL,0.0);
plot(x,type="l", xlab="tempo", ylab="preço");
res<-dbSendQuery(con, "DELETE FROM exogenous WHERE time >= '00:00:00'");
for(i in 1:length(x)){
sql <- sprintf("INSERT INTO exogenous (time, value) VALUES ('%s', %f)",DELTA_TEMPO[i], x[i]);
rs <- dbSendQuery(con, sql);
}
dbClearResult(rs);
dbDisconnect(con);
library(fBasics);
library(quantmod);
TESTE<-c("CRESCENTE","CONSTANTE","DECRESCENTE");
#TESTE<-c("CRESCENTE");
nTIPO<-1;
EXO.TIPOS <-data.frame(teste=c(1:50));
while (nTIPO <= 1){
lcoef <-c();
nTESTE<-1;
while (nTESTE <= 50){
filename<-paste0("./data/MV4/test_MV3_",TESTE[nTIPO],"",nTESTE,"_prices",".csv");
FGV.PRICES.ROWDATA <- read.csv(filename);
#############################################################
FGV.prices <- FGV.PRICES.ROWDATA[, "price", drop = FALSE];
rownames(FGV.prices) = FGV.PRICES.ROWDATA$time;
#############################################################
rows<-1:nrow(FGV.prices);
tendencia <- lm( FGV.prices[,1] ~ rows);
coef<-tendencia$coefficients[2]; #inclinacao
#plot(FGV.prices[,1], type="l",xlab="tempo", ylab="preços",main="Preços");
#abline(tendencia, lwd=2, col="blue", lty=3);
lcoef <- c(lcoef, coef);
nTESTE<-nTESTE+1;
}
COEFICIENTES <- data.frame(lcoef);
colnames(COEFICIENTES) <- TESTE[nTIPO];
EXO.TIPOS <-data.frame(EXO.TIPOS, COEFICIENTES);
nTIPO<-nTIPO+1;
}
write.csv(EXO.TIPOS, file = "./data/MV4/test_MV4_summary.csv", sep = " ",
eol = "\n", na = "NA", dec = ",", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),fileEncoding = "")
library(fBasics);
library(quantmod);
TESTE<-c("CRESCENTE","CONSTANTE","DECRESCENTE");
#TESTE<-c("CRESCENTE");
nTIPO<-1;
EXO.TIPOS <-data.frame(teste=c(1:50));
while (nTIPO <= 3){
lcoef <-c();
nTESTE<-1;
while (nTESTE <= 50){
filename<-paste0("./data/MV4/test_MV3_",TESTE[nTIPO],"",nTESTE,"_prices",".csv");
FGV.PRICES.ROWDATA <- read.csv(filename);
#############################################################
FGV.prices <- FGV.PRICES.ROWDATA[, "price", drop = FALSE];
rownames(FGV.prices) = FGV.PRICES.ROWDATA$time;
#############################################################
rows<-1:nrow(FGV.prices);
tendencia <- lm( FGV.prices[,1] ~ rows);
coef<-tendencia$coefficients[2]; #inclinacao
#plot(FGV.prices[,1], type="l",xlab="tempo", ylab="preços",main="Preços");
#abline(tendencia, lwd=2, col="blue", lty=3);
lcoef <- c(lcoef, coef);
nTESTE<-nTESTE+1;
}
COEFICIENTES <- data.frame(lcoef);
colnames(COEFICIENTES) <- TESTE[nTIPO];
EXO.TIPOS <-data.frame(EXO.TIPOS, COEFICIENTES);
nTIPO<-nTIPO+1;
}
write.csv(EXO.TIPOS, file = "./data/MV4/test_MV4_summary.csv", sep = " ",
eol = "\n", na = "NA", dec = ",", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),fileEncoding = "")
library("chron");
library("RMySQL");
# parametros a taxa com reversao a media
TEMPO_INICIO<-chron(times="00:00:00");
TEMPO_FIM<-chron(times="00:10:00");
DELTA_TEMPO <- seq(TEMPO_INICIO , TEMPO_FIM , by = times("00:00:01"));
TEMPO_TOTAL <- length(DELTA_TEMPO);
NUM_PONTOS <-length(DELTA_TEMPO);
MEDIA_GLOBAL=100.0;
LAMBDA=0.005;# teste 1
#LAMBDA=0.005;# teste 2
SIGMA=0.0005;# teste 1
#SIGMA=1;# teste 2
MEDIA_INICIAL=100.0;
# connecting to DB ...
con <- dbConnect(MySQL(),user="quickfix", password="quickfix",dbname="quickfix", host="localhost");
on.exit(dbDisconnect(con));
#The code of Euler Maruyama simulation method
ornstein_uhlenbeck <- function(T,n,nu,lambda,sigma,x0){
dw  <- rnorm(n, 0, sqrt(T/n))
dt  <- T/n
x <- c(x0)
for (i in 2:(n+1)) {
x[i]  <-  x[i-1] + lambda*(nu-x[i-1])*dt + sigma*dw[i-1];
#if(x[i] < 0)x[i] <-0;
}
return(x);
}
reta <- function(n,const,coef){
y <- c(const);
for (i in 2:(n+1)) {
y[i]  <-  y[i-1] + coef;
if(y[i] < 0)y[i] <-0;
}
return(y);
}
#x<- ornstein_uhlenbeck(TEMPO_TOTAL,NUM_PONTOS,MEDIA_GLOBAL,LAMBDA,SIGMA,MEDIA_INICIAL);
#plot(x,type="l", xlab="tempo", ylab="preço",col="red");
#x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.25);
x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.25);
#x<- reta(NUM_PONTOS,MEDIA_INICIAL,+0.5);
#x<- reta(NUM_PONTOS,MEDIA_INICIAL,0.0);
plot(x,type="l", xlab="tempo", ylab="preço");
res<-dbSendQuery(con, "DELETE FROM exogenous WHERE time >= '00:00:00'");
for(i in 1:length(x)){
sql <- sprintf("INSERT INTO exogenous (time, value) VALUES ('%s', %f)",DELTA_TEMPO[i], x[i]);
rs <- dbSendQuery(con, sql);
}
dbClearResult(rs);
dbDisconnect(con);
library(fBasics);
library(quantmod);
testnumber<-1;
ltestnumber <-c(); lsumvolume<-c(); lsdprice<-c(); lsdret<-c();
while (testnumber <=30){
filename<-paste0("./data/MMCycleTime/test_mmCycleTime_",testnumber,"_prices",".csv");
FGV.PRICES.ROWDATA <- read.csv(filename);
FGV.prices <- FGV.PRICES.ROWDATA[, "price", drop = FALSE]
rownames(FGV.prices) = FGV.PRICES.ROWDATA$time
FGV.volumes <- FGV.PRICES.ROWDATA[, "volume", drop = FALSE]
rownames(FGV.volumes) = FGV.PRICES.ROWDATA$time
FGV.PRICESVOLUMES <- cbind(FGV.prices, FGV.volumes)
FGV.PRICESVOLUMES <- as.xts(FGV.PRICESVOLUMES)
FGV.prices.rows = nrow(FGV.prices)
# retorno simples ...
FGV.rt = (FGV.prices[2:FGV.prices.rows, 1] -
FGV.prices[1:(FGV.prices.rows - 1), 1])/FGV.prices[1:(FGV.prices.rows - 1), 1]
names(FGV.rt) = rownames(FGV.prices)[2:FGV.prices.rows]
# retorno composto continuo
FGV.ccret = log(1 + FGV.rt);
sd_price <- sd(FGV.PRICESVOLUMES[,1]);
sd_return <- sd(FGV.ccret);
s<-sum(FGV.PRICESVOLUMES[,2]);
#  mean_return <- mean(FGV.ccret)
#  sd_return <- sd(FGV.ccret)
#  skewness_return <- skewness(FGV.ccret)
#  kurtosis_return <- kurtosis(FGV.ccret)
ltestnumber <- c(ltestnumber,testnumber);
lsumvolume <- c(lsumvolume, s);
lsdprice <- c(lsdprice, sd_price);
lsdret <- c(lsdret, sd_return);
testnumber<-testnumber*2;
}
sdprice <- data.frame(ltestnumber,lsdprice);
plot(sdprice, type='o',xlab="spread", ylab="volatilidade dos preços"
, main="Volatilidade dos preços x Periodo");
mod2 <- lm(lsdprice ~ ltestnumber)
abline(mod2, lwd=2, col="blue", lty=3)
sdprice <- data.frame(ltestnumber,lsdprice);
plot(sdprice, type='o',xlab="periodo", ylab="volatilidade dos preços"
, main="Volatilidade dos preços x Periodo");
mod2 <- lm(lsdprice ~ ltestnumber)
abline(mod2, lwd=2, col="blue", lty=3)
library(fBasics);
library(quantmod);
testnumber<-1;
ltestnumber <-c(); lsumvolume<-c(); lsdprice<-c(); lsdret<-c();
while (testnumber <=30){
filename<-paste0("./data/MMCycleTime/test_mmCycleTime_",testnumber,"_prices",".csv");
FGV.PRICES.ROWDATA <- read.csv(filename);
FGV.prices <- FGV.PRICES.ROWDATA[, "price", drop = FALSE]
rownames(FGV.prices) = FGV.PRICES.ROWDATA$time
FGV.volumes <- FGV.PRICES.ROWDATA[, "volume", drop = FALSE]
rownames(FGV.volumes) = FGV.PRICES.ROWDATA$time
FGV.PRICESVOLUMES <- cbind(FGV.prices, FGV.volumes)
FGV.PRICESVOLUMES <- as.xts(FGV.PRICESVOLUMES)
FGV.prices.rows = nrow(FGV.prices)
# retorno simples ...
FGV.rt = (FGV.prices[2:FGV.prices.rows, 1] -
FGV.prices[1:(FGV.prices.rows - 1), 1])/FGV.prices[1:(FGV.prices.rows - 1), 1]
names(FGV.rt) = rownames(FGV.prices)[2:FGV.prices.rows]
# retorno composto continuo
FGV.ccret = log(1 + FGV.rt);
sd_price <- sd(FGV.PRICESVOLUMES[,1]);
sd_return <- sd(FGV.ccret);
s<-sum(FGV.PRICESVOLUMES[,2]);
#  mean_return <- mean(FGV.ccret)
#  sd_return <- sd(FGV.ccret)
#  skewness_return <- skewness(FGV.ccret)
#  kurtosis_return <- kurtosis(FGV.ccret)
ltestnumber <- c(ltestnumber,testnumber);
lsumvolume <- c(lsumvolume, s);
lsdprice <- c(lsdprice, sd_price);
lsdret <- c(lsdret, sd_return);
testnumber<-testnumber+1;
}
sdret <- data.frame(ltestnumber,lsdret);
plot(sdret, type='o',xlab="periodo", ylab="volatilidade dos log-retornos"
, main="Volatilidade dos log-retornos x Periodo");
mod3 <- lm(lsdret ~ ltestnumber)
abline(mod3, lwd=2, col="blue", lty=3)
sdprice <- data.frame(ltestnumber,lsdprice);
plot(sdprice, type='o',xlab="periodo", ylab="volatilidade dos preços"
, main="Volatilidade dos preços x Periodo");
mod2 <- lm(lsdprice ~ ltestnumber)
abline(mod2, lwd=2, col="blue", lty=3)
volume <- data.frame(ltestnumber,lsumvolume);
plot(volume, type='o',xlab="periodo", ylab="número de negociações"
, main="Volume de negociação x Periodo");
mod4 <- lm(lsumvolume ~ ltestnumber)
abline(mod4, lwd=2, col="blue", lty=3)
fix(lsdret)
fix(lsdprice)
library(urca)
ur <- ur.df(y = FGV.PRICESVOLUMES[,1], type = "none",lags = 10,  selectlags = "BIC")
ur@testreg
summary(ur)
